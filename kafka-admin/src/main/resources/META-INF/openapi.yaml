# ------------------------------------------------------------------------------
# This file is used as input to the OpenAPI generator and is merged with the
# results of Java annotation scanning. Adding to this file should be limited to
# those situations where using annotations is not possible.
# ------------------------------------------------------------------------------
openapi: 3.1.0 # overridden by generator
info:
  title: Kafka Admin REST API
  description: An API to provide REST endpoints for query Kafka for admin operations
  version: <GENERATED FROM PROJECT VERSION>
  license:
    name: Apache 2.0
    url: 'https://www.apache.org/licenses/LICENSE-2.0'
servers:
  - url: '/'
    description: Kafka Admin REST API
security:
  - Bearer: []
  - OAuth2: []
tags:
  - name: topics
    description: Topic Management
  - name: groups
    description: Consumer Group Management Tag
  - name: acls
    description: Access Control Management (ACLs) Tag
  - name: records
    description: Send and receive records interactively
  - name: errors
    description: Error Type Retrieval
paths:
  /api/v1/topics:
    get:
      # Parameters listed to establish a fixed order (support stability for downstream generated code)
      parameters:
        - { in: query, schema: {}, name: offset }
        - { in: query, schema: {}, name: limit }
        - { in: query, schema: {}, name: size }
        - { in: query, schema: {}, name: filter }
        - { in: query, schema: {}, name: page }
        - { in: query, schema: {}, name: order }
        - { in: query, schema: {}, name: orderKey }

  /api/v1/topics/{topicName}: {}

  /api/v1/topics/{topicName}/records:
    get:
      # Parameters listed to establish a fixed order (support stability for downstream generated code)
      parameters:
        - { in: query, schema: {}, name: include }
        - { in: query, schema: {}, name: limit }
        - { in: query, schema: {}, name: maxValueLength }
        - { in: query, schema: {}, name: offset }
        - { in: query, schema: {}, name: partition }
        - { in: query, schema: {}, name: timestamp }

  /api/v1/consumer-groups:
    get:
      # Parameters listed to establish a fixed order (support stability for downstream generated code)
      parameters:
        - { in: query, schema: {}, name: offset }
        - { in: query, schema: {}, name: limit }
        - { in: query, schema: {}, name: size }
        - { in: query, schema: {}, name: page }
        - { in: query, schema: {}, name: topic }
        - { in: query, schema: {}, name: group-id-filter }
        - { in: query, schema: {}, name: order }
        - { in: query, schema: {}, name: orderKey }
      responses:
        "200":
          description: ""
          content:
            application/json:
              examples:
                List of consumer groups:
                  value:
                    kind: ConsumerGroupList
                    count: 1
                    limit: 10
                    offset: 0
                    items:
                      - id: consumer_group_1
                        kind: ConsumerGroup
                        href: "/api/v1/consumer-groups/consumer_group_1"
                        groupId: consumer_group_1
                        consumers:
                          - groupId: consumer_group_1
                            topic: topic-1
                            partition: 0
                            memberId: consumer_group_member1
                            offset: 5
                            lag: 0
                            logEndOffset: 5
                          - groupId: consumer_group_1
                            topic: topic-1
                            partition: 1
                            memberId: consumer_group_member2
                            offset: 3
                            lag: 0
                            logEndOffset: 3
                          - groupId: consumer_group_1
                            topic: topic-1
                            partition: 2
                            memberId: consumer_group_member3
                            offset: 6
                            lag: 1
                            logEndOffset: 5

  /api/v1/consumer-groups/{consumerGroupId}:
    get:
      # Parameters listed to establish a fixed order (support stability for downstream generated code)
      parameters:
        - { in: path, schema: {}, name: consumerGroupId }
        - { in: query, schema: {}, name: order }
        - { in: query, schema: {}, name: orderKey }
        - { in: query, schema: {}, name: partitionFilter }
        - { in: query, schema: {}, name: topic }

  /api/v1/consumer-groups/{consumerGroupId}/reset-offset: {}

  /api/v1/acls:
    get:
      parameters:
      # Parameters listed to establish a fixed order (support stability for downstream generated code)
      - { in: query, schema: {}, name: resourceType }
      - { in: query, schema: {}, name: resourceName }
      - { in: query, schema: {}, name: patternType }
      - { in: query, schema: {}, name: principal }
      - { in: query, schema: {}, name: operation }
      - { in: query, schema: {}, name: permission }
      - { in: query, schema: {}, name: page }
      - { in: query, schema: {}, name: size }
      - { in: query, schema: {}, name: order }
      - { in: query, schema: {}, name: orderKey }
    delete:
      parameters:
      # Parameters listed to establish a fixed order (support stability for downstream generated code)
      - { in: query, schema: {}, name: resourceType }
      - { in: query, schema: {}, name: resourceName }
      - { in: query, schema: {}, name: patternType }
      - { in: query, schema: {}, name: principal }
      - { in: query, schema: {}, name: operation }
      - { in: query, schema: {}, name: permission }

  /api/v1/acls/resource-operations:
    get:
      security: [ { } ]
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: array
                  items:
                    type: string
              examples:
                success:
                  summary: Map of resources to allowed ACL operations
                  value: |-
                    {
                        "cluster": [ "describe", "alter" ],
                        "group": [ "all", "delete", "describe", "read" ],
                        "topic": [ "all", "alter", "alter_configs", "create", "delete", "describe", "describe_configs", "read", "write" ],
                        "transactional_id": [ "all", "describe", "write" ]
                    }
                disabled:
                  summary: No configuration of ACL bindings is allowed
                  value: '{}'

  /api/v1/errors:
    get:
      security: [{}]

  /api/v1/errors/{errorId}:
    get:
      security: [{}]

components:
  schemas:
    AclBinding:
      example:
        kind: AclBinding
        resourceType: TOPIC
        resourceName: '*'
        patternType: LITERAL
        principal: 'User:user123'
        operation: READ
        permission: ALLOW
    Topic:
      example:
        id: my-topic
        kind: Topic
        href: "/api/v1/topics/my-topic"
        name: my-topic
        config:
          - key: min.insync.replicas
            value: '1'
          - key: max.message.bytes
            value: '1050000'
        partitions:
          - id: 0
            replicas:
              - id: 0
              - id: 1
            isr:
              - id: 0
              - id: 1
            leader:
              id: 0
          - id: 1
            replicas:
              - id: 0
              - id: 1
            isr:
              - id: 0
              - id: 1
            leader:
              id: 1
    Partition:
      example:
        id: 0
        replicas:
          - id: 0
          - id: 1
        isr:
          - id: 0
          - id: 1
        leader:
          id: 1
    ConfigEntry:
      example:
        key: min.insync.replicas
        value: '1'
    TopicsList:
      example:
        kind: TopicList
        items:
          - id: my-topic
            kind: Topic
            href: "/api/v1/topics/my-topic"
            name: my-topic
            config:
              - key: min.insync.replicas
                value: '1'
              - key: max.message.bytes
                value: '1050000'
            partitions:
              - id: 0
                replicas:
                  - id: 0
                  - id: 1
                isr:
                  - id: 0
                  - id: 1
                leader:
                  id: 0
              - id: 1
                replicas:
                  - id: 0
                  - id: 1
                isr:
                  - id: 0
                  - id: 1
                leader:
                  id: 1
        offset: 25
        limit: 90
        count: 94
    TopicSettings:
      example:
        numPartitions: 2
        config:
          - key: min.insync.replicas
            value: '1'
          - key: max.message.bytes
            value: '1050000'
    NewTopicInput:
      example:
        name: my-topic
        settings:
          numPartitions: 3
          config:
            - key: min.insync.replicas
              value: '1'
            - key: max.message.bytes
              value: '1050000'
    Consumer:
      example:
        groupId: consumer_group_1
        topic: topic-1
        partition: 0
        memberId: consumer_group_1-0
        offset: 5
        lag: 0
        logEndOffset: 5
    ConsumerGroupList:
      example:
        kind: ConsumerGroupList
        count: 1
        limit: 10
        offset: 0
        items:
          - id: consumer_group_1
            kind: ConsumerGroup
            href: "/api/v1/consumer-groups/consumer_group_1"
            groupId: consumer_group_1
            consumers:
              - groupId: consumer_group_1
                topic: topic-1
                partition: 0
                memberId: consumer_group_member1
                offset: 5
                lag: 0
                logEndOffset: 5
              - groupId: consumer_group_1
                topic: topic-1
                partition: 1
                memberId: consumer_group_member2
                offset: 3
                lag: 0
                logEndOffset: 3
              - groupId: consumer_group_1
                topic: topic-1
                partition: 2
                memberId: consumer_group_member3
                offset: 6
                lag: 1
                logEndOffset: 5
    ConsumerGroupResetOffsetResult:
      example:
        total: 2
        page: 1
        size: 10
        items:
          - topic: your-topic
            partition: 0
            offset: 4
          - topic: my-topic
            partition: 0
            offset: 0
    ConsumerGroupResetOffsetResultItem:
      example:
        topic: your-topic
        partition: 0
        offset: 4
  responses:
    BadRequest:
      # Status 400
      description: |-
        The client request was invalid. One or more request parameters or the request
        body was rejected. Additional information may be found in the response.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            badrequest:
              summary: Invalid query parameter
              value:
                code: 400
                error_message: Invalid parameter value
    NotAuthorized:
      # Status 401
      description: Request authentication missing or invalid
      content:
         application/json:
           schema:
             $ref: '#/components/schemas/Error'
    Forbidden:
      # Status 403
      description: User is not authorized to access requested resource
      content:
         application/json:
           schema:
             $ref: '#/components/schemas/Error'
    NotFound:
      # Status 404
      description: The requested resource could not be found.
      content:
         application/json:
           schema:
             $ref: '#/components/schemas/Error'
    Conflict:
      # Status 409
      description: The resource already exists.
      content:
         application/json:
           schema:
             $ref: '#/components/schemas/Error'
    ServerError:
      # Status 500
      description: Internal server error
      content:
         application/json:
           schema:
             $ref: '#/components/schemas/Error'
    ServiceUnavailable:
      # Status 503
      description: Kafka service unavailable
      content:
         application/json:
           schema:
             $ref: '#/components/schemas/Error'
  securitySchemes:
    Bearer:
      type: http
      description: JWT used with HTTP Bearer authentication
      scheme: bearer
      bearerFormat: JWT
    OAuth2:
      type: oauth2
      description: Client credentials used to obtain an OAuth 2.0 access token
      flows:
        clientCredentials:
          # Place-holder value for `tokenUrl`
          tokenUrl: "/token"
          scopes: {}
